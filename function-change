#将for循环部分改为def函数
import numpy as np
import xlrd
import math

workbook = xlrd.open_workbook(r'SJAFFE_feature.xlsx')
workbook2 = xlrd.open_workbook(r'SJAFFE_labels.xlsx')
# print(workbook2.sheet_names())#输出页签名r

feature = workbook.sheet_by_name('features')
labels = workbook2.sheet_by_name('labels')
feature_nrows = feature.nrows
feature_ncols = feature.ncols
labels_nrows = labels.nrows
labels_ncols = labels.ncols

rD = np.empty([labels_nrows][labels_nrows])
r = np.empty([feature_nrows][feature_nrows])
r_new = np.empty([feature_nrows][feature_nrows])
r_new1 = np.empty([feature_nrows][feature_nrows])
r_a = np.empty([feature_nrows][feature_nrows])
r_a1 = np.empty([feature_nrows][feature_nrows])
r_a2 = np.empty([feature_nrows][feature_nrows])
maxC = []
maxS = []
final_feature = 34
t = 0

def fun_maxC(i):
# for i in range(0, feature_ncols):
    max = 0
    min = 999
    sumk1 = np.empty([feature_nrows][1])
    for t in range(0, feature_nrows):
        if feature.cell(t, i).value > max:
            max = feature.cell(t, i).value
        if feature.cell(t, i).value < min:
            min = feature.cell(t, i).value
    for j in range(0, feature_nrows):
        sum4 = 0
        for k in range(0, feature_nrows):
            if abs(feature.cell(j, i).value - feature.cell(k, i).value) / abs(max - min) <= 0.25:
                r[j][k] = 1 - 4 * abs(feature.cell(j, i).value - feature.cell(k, i).value) / abs(max - min)
                r[k][j] = 1 - 4 * abs(feature.cell(j, i).value - feature.cell(k, i).value) / abs(max - min)
                sum4 = sum4 + r[j][k]
            else:
                r[j][k] = 0
                r[k][j] = 0
                # sum4 = sum4 + r[j][k]

        sumk1[j][0] = sum4


    sum6 = 0
    maxC1 = 0
    for m in range(0, labels_ncols):
        for j in range(0, labels_nrows):
            for k in range(0, labels_nrows):
                if abs(labels.cell(j, m).value - labels.cell(k, m).value) <= 0.25:
                    rD[k][j] = 1 - 4 * abs(labels.cell(j, m).value - labels.cell(k, m).value)
                    rD[j][k] = 1 - 4 * abs(labels.cell(j, m).value - labels.cell(k, m).value)
                else:
                    rD[j][k] = 0
                    rD[k][j] = 0
        #信息量
        sum1 = 0
        sum2 = 0
        for j in range(0, labels_nrows):
            sum1 = 0
            for k in range(0, labels_nrows):
                sum1 = sum1 + rD[j][k]
            sum2 = sum2 + math.log(sum1 / labels_nrows)
        H_RD = -1 * sum2 / labels_nrows

        sum3 = 0
        sum5 = 0
        for j in range(0, feature_nrows):
            sum3 = 0
            for k in range(0, feature_nrows):
                if r[j][k] < rD[j][k]:
                    r_new[j][k] = r[j][k]
                else:
                    r_new[j][k] = rD[j][k]
                sum3 = sum3 + r_new[j][k]
            sum5 = sum5 + math.log(sum3 / sumk1[j][0])
        #H(D|B)
        sum6 = -1 * sum5 / feature_nrows
        #MI(ai; dj)
        maxC1 = maxC1 + (H_RD - sum6)
        maxC2 = maxC1 / labels_ncols
    # maxC.append(maxC2)
    return maxC2


maxC_ = 0
flag = 0
sum5 = 0
sum6 = 0
#找到maxC最大的特征(也就是最大相关性)
for s in range(0, len(maxC)):
    if maxC[s] > maxC_:
        maxC_ = maxC[s]
        flag = s
S = np.empty([feature_nrows][feature_ncols])
for j in range(0, feature_nrows):
    S[j][0] = feature.cell(j, flag).value




def fun_Haj(flag):
    max = 0
    min = 999
    sumk1 = np.empty([feature_nrows][1])
    for t in range(0, feature_nrows):
        if feature.cell(t, flag).value > max:
            max = feature.cell(t, flag).value
        if feature.cell(t, flag).value < min:
            min = feature.cell(t, flag).value

    for j in range(0, feature_nrows):
        sum4 = 0
        for k in range(0, feature_nrows):
            if abs(feature.cell(j, flag).value - feature.cell(k, flag).value) / abs(max - min) <= 0.25:
                r_a[j][k] = 1 - 4 * abs(feature.cell(j, flag).value - feature.cell(k, flag).value) / abs(max - min)
                r_a[k][j] = 1 - 4 * abs(feature.cell(j, flag).value - feature.cell(k, flag).value) / abs(max - min)
                sum4 = sum4 + r[j][k]
            else:
                r_a[j][k] = 0
                r_a[k][j] = 0
                # sum4 = sum4 + r[j][k]

        sumk1[j][0] = sum4
    for j in range(0, feature_nrows):
        sum5 = sum5 + math.log(sumk1[j][0] / feature_nrows)
    sum6 = -1 * sum5 / feature_nrows
    return sum6
    #sum6==H(aj)


