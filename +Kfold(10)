#加入了十折交叉验证

import numpy as np
import xlrd
import math
import pandas as pd
from sklearn.model_selection import KFold




workbook = xlrd.open_workbook(r'SJAFFE_feature_test.xlsx')
workbook2 = xlrd.open_workbook(r'SJAFFE_labels_test.xlsx')
# print(workbook2.sheet_names())#输出页签名r

feature = workbook.sheet_by_name('features')
labels = workbook2.sheet_by_name('labels')
feature_nrows = feature.nrows
feature_ncols = feature.ncols
labels_nrows = labels.nrows
labels_ncols = labels.ncols

rD = np.empty([labels_nrows, labels_nrows])
r = np.empty([feature_nrows, feature_nrows])
r_new = np.empty([feature_nrows, feature_nrows])
r_new1 = np.empty([feature_nrows, feature_nrows])
r_a = np.empty([feature_nrows, feature_nrows])
r_a1 = np.empty([feature_nrows, feature_nrows])
r_a2 = np.empty([feature_nrows, feature_nrows])
maxC = []
maxS = []
# final_feature = 34
# t = 0

def fun_maxC(X_train, i):
# for i in range(0, feature_ncols):
    max = 0
    min = 999
    sumk1 = np.empty([X_train.shape[0], 1])
    for t in range(0, X_train.shape[0]):
        if X_train[t][i] > max:
            max = X_train[t][i]
        if X_train[t][i] < min:
            min = X_train[t][i]
    for j in range(0, X_train.shape[0]):
        sum4 = 0
        for k in range(0, X_train.shape[0]):
            if abs(X_train[j][i] - X_train[k][i]) / abs(max - min) <= 0.25:
                r[j][k] = 1 - 4 * abs(X_train[j][i] - X_train[k][i]) / abs(max - min)
                r[k][j] = 1 - 4 * abs(X_train[j][i] - X_train[k][i]) / abs(max - min)
                sum4 = sum4 + r[j][k]
            else:
                r[j][k] = 0
                r[k][j] = 0
                # sum4 = sum4 + r[j][k]

        sumk1[j][0] = sum4


    sum6 = 0
    maxC1 = 0
    for m in range(0, labels_ncols):
        for j in range(0, labels_nrows):
            for k in range(0, labels_nrows):
                if abs(labels.cell(j, m).value - labels.cell(k, m).value) <= 0.25:
                    rD[k][j] = 1 - 4 * abs(labels.cell(j, m).value - labels.cell(k, m).value)
                    rD[j][k] = 1 - 4 * abs(labels.cell(j, m).value - labels.cell(k, m).value)
                else:
                    rD[j][k] = 0
                    rD[k][j] = 0
        #信息量
        sum1 = 0
        sum2 = 0
        for j in range(0, X_train.shape[0]):
            sum1 = 0
            for k in range(0, X_train.shape[0]):
                sum1 = sum1 + rD[j][k]
            sum2 = sum2 + math.log(sum1 / X_train.shape[0])
        H_RD = -1 * sum2 / X_train.shape[0]

        sum3 = 0
        sum5 = 0
        for j in range(0, X_train.shape[0]):
            sum3 = 0
            for k in range(0, X_train.shape[0]):
                if r[j][k] < rD[j][k]:
                    r_new[j][k] = r[j][k]
                else:
                    r_new[j][k] = rD[j][k]
                sum3 = sum3 + r_new[j][k]
            sum5 = sum5 + math.log(sum3 / sumk1[j][0])
        #H(D|B)
        sum6 = -1 * sum5 / X_train.shape[0]
        #MI(ai; dj)
        maxC1 = maxC1 + (H_RD - sum6)
    maxC2 = maxC1 / labels_ncols
    # maxC.append(maxC2)
    return maxC2



def fun_Haj(flag):
    max = 0
    min = 999
    sumk1 = np.empty([X_train.shape[0], 1])
    for t in range(0, X_train.shape[0]):
        if X_train[t][flag] > max:
            max = X_train[t][flag]
        if X_train[t][flag] < min:
            min = X_train[t][flag]

    for j in range(0, X_train.shape[0]):
        sum4 = 0
        for k in range(0, X_train.shape[0]):
            if abs(X_train[j][flag] - X_train[k][flag]) / abs(max - min) <= 0.25:
                r_a[j][k] = 1 - 4 * abs(X_train[j][flag] - X_train[k][flag]) / abs(max - min)
                r_a[k][j] = 1 - 4 * abs(X_train[j][flag] - X_train[k][flag]) / abs(max - min)
                sum4 = sum4 + r_a[j][k]
            else:
                r_a[j][k] = 0
                r_a[k][j] = 0
                # sum4 = sum4 + r[j][k]

        sumk1[j][0] = sum4
    sum5 = 0
    for j in range(0, X_train.shape[0]):
        sum5 = sum5 + math.log(sumk1[j][0] / X_train.shape[0])
    sum6 = -1 * sum5 / X_train.shape[0]
    return sum6
    #sum6==H(aj)


#特征之间的关系矩阵
def RaS(i, j, k):
    max = 0
    min = 999
    for t in range(0, X_train.shape[0]):
        if S[t][i] > max:
            max = S[t][i]
        if S[t][i] < min:
            min = S[t][i]
    # if abs(feature.cell(j, i).value - feature.cell(k, i).value) / abs(max - min) <= 0.25:
    if S[j][i] - S[k][i] / abs(max - min) <= 0.25:
        r_a2[j][k] = 1 - 4 * S[j][i] - S[k][i] / abs(max - min)
        r_a2[k][j] = 1 - 4 * S[j][i] - S[k][i] / abs(max - min)
        # sum4 = sum4 + r[j][k]
    else:
        r_a2[j][k] = 0
        r_a2[k][j] = 0
    return r_a2

def Ra_new(i, j, k):
    max = 0
    min = 999
    for t in range(0, X_train.shape[0]):
        if feature_new[t][i] > max:
            max = feature_new[t][i]
        if feature_new[t][i] < min:
            min = feature_new[t][i]
    # if abs(feature.cell(j, i).value - feature.cell(k, i).value) / abs(max - min) <= 0.25:
    if feature_new[j][i] - feature_new[k, i] / abs(max - min) <= 0.25:
        r_a2[j][k] = 1 - 4 * feature_new[j][i] - feature_new[k][i] / abs(max - min)
        r_a2[k][j] = 1 - 4 * feature_new[j][i] - feature_new[k][i] / abs(max - min)
        # sum4 = sum4 + r[j][k]
    else:
        r_a2[j][k] = 0
        r_a2[k][j] = 0
    return r_a2


#特征与标签之间的关系矩阵
def Rad(m, j, k):
    if abs(labels.cell(j, m).value - labels.cell(k, m).value) <= 0.25:
        rD[k][j] = 1 - 4 * abs(labels.cell(j, m).value - labels.cell(k, m).value)
        rD[j][k] = 1 - 4 * abs(labels.cell(j, m).value - labels.cell(k, m).value)
    else:
        rD[j][k] = 0
        rD[k][j] = 0
    return rD
def MI(i):
    if i in flag_cov:
        for m in range(0, X_train.shape[0]):
            for n in range(0, X_train.shape[0]):
                a_1 = RaS(i, m, n)
        haj = fun_Haj(i)
        for j in range(0, feature_ncols):
            if j not in flag_cov:
                for m in range(0, X_train.shape[0]):
                    for n in range(0, X_train.shape[0]):
                        a_2 = Ra_new(j, m, n)
                for m in range(0, X_train.shape[0]):
                    for n in range(0, X_train.shape[0]):
                        if a_1[m][n] < a_2[m][n]:
                            a_new[m][n] = a_1[m][n]
                        else:
                            a_new[m][n] = a_2[m][n]
                sum_c = 0
                for m in range(0, X_train.shape[0]):
                    sum_a = 0
                    sum_b = 0
                    for n in range(0, X_train.shape[0]):
                        sum_a = sum_a + a_new[m][n]
                        sum_b = sum_b + a_2[m][n]
                    sum_c = sum_c + math.log(sum_a / sum_b)
                sum_d = -1 * sum_c / X_train.shape[0]
                mi = haj - sum_d
                a_4[i][j] = mi
    return a_4



if __name__=="__main__":

    S1 = pd.read_excel(r'SJAFFE_feature_test.xlsx', sheet_name='features', header=None)
    S2 = pd.read_excel(r'SJAFFE_labels_test.xlsx', sheet_name='labels', header=None)
    # S2.columns = ['10', '11', '12', '13', '14', '15']
    S3 = pd.concat([S1, S2], axis=1)
    kf = KFold(n_splits=10, shuffle=True)
    for train_index, test_index in kf.split(S1):
        print(train_index, test_index)
        X_train, X_test = S1.iloc[train_index], S1.iloc[test_index]
        y_train, y_test = S2.iloc[train_index], S2.iloc[test_index]  # 这里是使用10折交叉验证将数据集分成10分
        X_train = np.array(X_train)
        y_train = np.array(y_train)

        max = 0
        flag_MC = 0
        for i in range(0, feature_ncols):
            maxCC2 = fun_maxC(X_train, i)
            print(maxCC2)
            if maxCC2 > max:
                max = maxCC2
                flag_MC = i
        # print("LALALA")
        # print(flag_MC)
        S = np.zeros([X_train.shape[0], feature_ncols])
        for j in range(0, X_train.shape[0]):
            S[j][flag_MC] = feature.cell(j, flag_MC).value
        flag_cov = []
        flag_cov.append(flag_MC)
        s = 0
        print(S)
        while s < 4:
            s += 1
            feature_new = np.zeros([X_train.shape[0], feature_ncols])
            t = 0
            for i in range(0, feature_ncols):
                if i not in flag_cov:
                    # feature_new[:, t] = feature[:, 0:feature_ncols]
                    for m in range(0, X_train.shape[0]):
                        feature_new[m][i] = X_train[m][i]
                    t += 1
            # print(feature_new)
            a_new = np.empty([X_train.shape[0], X_train.shape[0]])
            a_3 = np.empty([feature_ncols, feature_ncols])
            a_4 = np.zeros([feature_ncols, feature_ncols])
            a_4new = np.zeros([feature_ncols, feature_ncols])
            sum = 0
            for i in range(0, feature_ncols):
                a_4 = MI(i)
                # print(a_2)
                # print(a_new)
                # print(a_4)
            max_a = -999
            flag_a = 0
            # print("hah")
            # print(t)
            # print("HH")
            for i in range(0, feature_ncols):
                for j in range(0, feature_ncols):
                    a_4new[0][i] = a_4new[0][i] + a_4[j][i]
                a_4new[0][i] = max - a_4new[0][i] / s
            # print(a_4new)
                if a_4new[0][i] > max_a and i not in flag_cov:
                    max_a = a_4new[0][i]
                    flag_a = i
            # print(a_4new)
            # print(max_a)
            for j in range(0, X_train.shape[0]):
                S[j][flag_a] = feature_new[j][flag_a]
            # print(flag_a)
            flag_cov.append(flag_a)
        print(flag_cov)
        print(S)













